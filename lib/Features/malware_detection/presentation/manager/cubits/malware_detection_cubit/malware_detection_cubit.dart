import 'dart:io';

import 'package:app/Features/malware_detection/data/repos/malware_detection_repo.dart';
import 'package:app/core/functions/pick_file.dart';
import 'package:app/core/models/prediction_model.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

part 'malware_detection_states.dart';

class MalwareDetectionCubit extends Cubit<MalwareDetectionStates> {
  MalwareDetectionCubit({required this.malwareDetectionRepo})
      : super(MalwareDetectionInitial());
  MalwareDetectionRepo malwareDetectionRepo;
  File? file;

  deleteFile() {
    file = null;
    emit(FileDeleteState());
  }

  Future detectMalware() async {
    emit(DetectMalwareLoadingState());
    var result = await malwareDetectionRepo.detectMalware(file: file!);

    result.fold(
      (failure) => emit(DetectMalwareFailureState(failure.errMessage)),
      (predection) => emit(DetectMalwareSuccessState(predection)),
    );
  }

  Future pickFileForMalwareDetection() async {
    var result = await pickFile();

    result.fold(
      (failure) => emit(PickFileFailureState(failure.errMessage)),
      (value) {
        file = value;
        emit(PickFileSuccessState());
      },
    );
  }
}
